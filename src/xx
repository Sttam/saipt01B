/*

   Date    : 2020/05/26
   Author  : Matts


   Purpose : 
         Without a solid understanding of how type deduction operates, 
         effective programming in modern C++ is all but impossible. 

         Learning : - 

            1. Simple template function is declared  with its implementation 
            2. C++ Compiler read a statement and find the correct function signature
            3. Template function is needed for the compiler to generate the code.
	    4. We are using built-in types int and double to which it knows how to operate on 
            5. If we use a datatype which is not built it requires the class knowledge

*/

#include <iostream>
template<typename T> void f(const T& param);

int main () {
  double fraction = 10.2340;

  int  x1 = 10;
  auto x2 = 20;
  const int x3 = 30;

  f(x1);
  std::cout << "Hello I am in the main : " << x1 << std::endl;

  f(x2);
  std::cout << "Hello I am in the main : " << x2 << std::endl;

  f(x3);
  std::cout << "Hello I am in the main : " << x3 << std::endl;

  return (EXIT_SUCCESS);
}

template<typename T>
void f(T& param){
  param *= 2;
  std::cout << "function void void f(T& param) : " << param << std::endl;
}

template<typename T>
void f(const T& param){
  std::cout << "function void f(const T& param) : " << param << std::endl;
}
